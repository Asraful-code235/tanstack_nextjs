import { removeItem } from '@/app/cart/cartSlice';
import Search from '@/components/Search';
import InfiniteScroll from 'react-infinite-scroller';

import {
  QueryClient,
  dehydrate,
  useInfiniteQuery,
  useQuery,
} from '@tanstack/react-query';
import axios from 'axios';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import ReactPaginate from 'react-paginate';
import { useDispatch, useSelector } from 'react-redux';

const max_limit = 10;

const fetchUrl = async (pageParam = 10) => {
  const res = await axios.get(
    `https://dummyjson.com/products?limit=10&skip=${pageParam}`
  );
  return res.data;
};

async function getPosts(currentPage, searchTerm) {
  let url = `https://jsonplaceholder.typicode.com/posts?_limit=${max_limit}&_page=${
    10 * currentPage
  }`;
  const res = await axios.get(url);

  return res.data;
}

async function getCategories() {
  const res = await axios.get('https://dummyjson.com/products/categories');
  return res.data;
}

async function getProductBasedOnCategory(category) {
  if (!category) return null;
  const res = await axios.get(
    `https://dummyjson.com/products/category/${category}`
  );
  return res.data;
}

export default function Home(props) {
  // const dispatch = useDispatch();
  // const { cart } = useSelector((state) => state.cart);
  // const [currentPage, setCurrentPage] = useState(1);
  // const [categoriesSelected, setCategoriesSelected] = useState('');

  // const { data, isLoading, totalPage } = useQuery({
  //   queryKey: ['posts', currentPage],
  //   queryFn: () => getPosts(currentPage),
  //   keepPreviousData: true,
  //   // getNextPageParam:(lastPage,allPage)=>{
  //   //   const
  //   // }

  //   // initialData: props.dehydrateState,
  // });

  // const { data: categories } = useQuery({
  //   queryKey: ['category'],
  //   queryFn: getCategories,

  //   initialData: props.dehydrateState.categories,
  // });
  // const [category, setCategory] = useState('');
  // const { data: selectCategory } = useQuery({
  //   queryKey: ['select', categoriesSelected],
  //   queryFn: () => getProductBasedOnCategory(categoriesSelected),
  //   retry: false,
  // });

  // useEffect(() => {
  //   const queryClient = new QueryClient();
  //   if (currentPage <= max_limit) {
  //     const nextPage = currentPage + 1;
  //     queryClient.invalidateQueries({
  //       queryKey: ['posts', nextPage],
  //       queryFn: () => getPosts(nextPage),
  //     });
  //   }
  // }, [currentPage, data?.length]);

  // if (isLoading) return 'Loading...';

  // if (!data) {
  //   return 'No data';
  // }

  // const filteredData =
  //   categoriesSelected !== 'All' && selectCategory
  //     ? selectCategory.products
  //     : data;

  // let pagesArray;
  // if (data) {
  //   const totalPage = 10;
  //   const maxVisiblePage = 3;
  //   const maxPages = Math.min(totalPage, maxVisiblePage);
  //   const startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
  //   const endPage = Math.min(startPage + maxPages + 1, totalPage);
  //   pagesArray = Array(endPage - startPage + 1)
  //     .fill()
  //     .map((_, index) => startPage + index);
  //   console.log(pagesArray);
  // }

  // const handlePageClick = (e) => {
  //   let next = e.selected + 1;
  //   setCurrentPage(next);
  // };

  const { data, isLoading, isError, isFetching, hasNextPage, fetchNextPage } =
    useInfiniteQuery({
      queryKey: ['products'],
      queryFn: ({ pageParam = 0 }) => fetchUrl(pageParam),
      getNextPageParam: (lastPage, allPage) => {
        const { skip, total } = lastPage;

        if (skip + 10 < total) {
          return skip + 10;
        }
      },
    });

  if (isLoading) return 'Loading...';

  return (
    <>
      <Head>
        <title></title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <InfiniteScroll hasMore={hasNextPage} loadMore={fetchNextPage}>
          {data?.pages.map((pagedata) => {
            return pagedata.products.map((data) => (
              <li className="border p-[1vmax]" key={data.title}>
                {data.title}
              </li>
            ));
          })}
          {isFetching && 'fetching...'}
        </InfiniteScroll>
        {/* {cart.length > 0 &&
          cart.map((item) => (
            <li
              onClick={() => dispatch(removeItem({ id: item.id }))}
              key={item}
            >
              {item.id}
            </li>
          ))}
        <Search />

        <select
          value={categoriesSelected}
          onChange={(e) => setCategoriesSelected(e.target.value)}
          name="all"
          id=""
        >
          <option value="All">All</option>
          {categories?.map((category) => (
            <option key={category} value={category}>
              {category}
            </option>
          ))}
        </select>
        <div className="mt-8 flex flex-col">
          {filteredData?.map((UserData, i) => (
            <Link
              className=""
              href={`/product/${UserData.id}`}
              key={UserData.id}
            >
              {UserData.title}
            </Link>
          ))}
        </div>
        <div className="p-[1vmax] flex gap-2">
          <button
            disabled={currentPage <= 1}
            className="border rounded-lg px-3 py-2"
            onClick={() => setCurrentPage(1)}
          >
            First
          </button>
          <span className=" rounded-lg flex gap-2">
            <ReactPaginate
              marginPagesDisplayed={2}
              className="paginatation flex items-center justify-center gap-2 border"
              breakLabel="..."
              nextLabel=" >"
              onPageChange={handlePageClick}
              pageRangeDisplayed={3}
              pageCount={10}
              previousLabel="< "
              activeClassName={`bg-blue-400 border p-[1vmax]`}
              renderOnZeroPageCount={null}
            />
          </span>
          <button
            disabled={currentPage >= max_limit}
            className="border rounded-lg px-3 py-2"
            onClick={() => {
              setCurrentPage(10);
            }}
          >
            Last
          </button>
        </div> */}
      </main>
    </>
  );
}

export async function getStaticProps() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ['posts'],
    queryFn: getPosts,
  });

  return {
    props: {
      dehydrateState: dehydrate(queryClient),
    },
  };
}
